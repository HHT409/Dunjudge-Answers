#include <bits/stdc++.h>
using namespace std;
#define int long long

main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n;
    cin >> n;
    int arr[4];
    int results[n];
    for (int i = 0; i < n; i++) {
        results[i] = 0;
    }
    /* the integer (1-16) in results is the original thing
    0 is bad magician
    -1 is volunteer cheated */
    for (int k = 0; k < n; k++) {
        vector <int> v;
        int row1, row2, card;
        int ans1[4], ans2[4];
        cin >> row1;
        for (int i = 0; i < 4; i++) {
            if (i + 1 == row1) {
                for (int j = 0; j < 4; j++) {
                    cin >> arr[j];
                    ans1[j] = arr[j];
                }
            } else {
                for (int j = 0; j < 4; j++) {
                    cin >> arr[i];
                }
            }
        }
        cin >> row2;
        for (int i = 0; i < 4; i++) {
            if (i + 1 == row2) {
                for (int j = 0; j < 4; j++) {
                    cin >> arr[j];
                    ans2[j] = arr[j];
                }
            } else {
                for (int j = 0; j < 4; j++) {
                    cin >> arr[i];
                }
            }
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (ans1[i] == ans2[j]) {
                    v.push_back(ans1[i]);
                    card = i;
                }
            }
        }
        if (v.size() > 2) {
            //bad magician
            results[k] = 0;
        } else if (v.size() == 1) {
            //normal
            results[k] = ans1[card];
        } else if (v.size() == 0) {
            //volunteer cheated
            results[k] = -1;
        }
    }
    for (int i = 0; i < n; i++) {
        if (results[i] == -1) {
            cout << "Case #" << i + 1 << ": Volunteer cheated!\n";
        } else if (results[i] == 0) {
            cout << "Case #" << i + 1 << ": Bad magician!\n";
        } else {
            cout << "Case #" << i + 1 << ": " << results[i] << '\n';
        }
    }
}
